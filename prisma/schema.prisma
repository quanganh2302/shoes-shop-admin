// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // relationMode = "prisma"
}

model Role {
  id        String   @id @default(uuid())
  key       String   @unique
  value     String
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id           String         @id @default(uuid())
  email        String         @unique
  password     String
  phoneNumber  String?
  userName     String?        @default("User")
  shoppingCart ShoppingCart[]
  wishlist     Wishlist[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Role         Role           @relation(fields: [roleKey], references: [key])
  roleKey      String
}

model Gender {
  id         String     @id @default(uuid())
  name       String     @unique
  categories Category[] @relation("GenderToCategory")
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Category {
  id         String    @id @default(uuid())
  name       String    @unique
  products   Product[] @relation("CategoryToProduct")
  Genders    Gender    @relation("GenderToCategory", fields: [genderName], references: [name])
  genderName String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([genderName])
}

model Collection {
  id                   String                 @id @default(uuid())
  name                 String
  ProductAndCollection ProductAndCollection[]
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
}

model Promotion {
  id           String    @id @default(uuid())
  name         String
  description  String
  discountRate Decimal
  Product      Product[] @relation("PromotionToProduct")
  startDate    DateTime
  endDate      DateTime
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model ProductAndCollection {
  id           String     @id @default(uuid())
  productId    String
  Product      Product    @relation(fields: [productId], references: [id])
  Collection   Collection @relation(fields: [collectionId], references: [id])
  collectionId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([productId])
  @@index([collectionId])
}

model Style {
  id        String    @id @default(uuid())
  name      String
  Product   Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Brand {
  id        String    @id @default(uuid())
  name      String
  Product   Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id                   String                 @id @default(uuid())
  name                 String
  category             Category               @relation("CategoryToProduct", fields: [categoryId], references: [id])
  categoryId           String
  productItem          ProductItem[]
  SKU                  String                 @unique
  qty_in_stoke         Decimal?               @default(0)
  description          String
  images               String[]
  avatarURL            String
  cartItem             ShoppingCartItem[]
  wishlistItem         WishlistItem[]
  price                Decimal
  Promotion            Promotion?             @relation("PromotionToProduct", fields: [promotionId], references: [id])
  promotionId          String?
  Style                Style                  @relation(fields: [styleId], references: [id])
  styleId              String
  Brand                Brand                  @relation(fields: [brandId], references: [id])
  brandId              String
  ProductAndCollection ProductAndCollection[]
  Color                Color                  @relation(fields: [colorId], references: [id])
  colorId              String
  isFeatured           Boolean                @default(false)
  isArchived           Boolean                @default(false)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt

  @@index([styleId])
  @@index([brandId])
  @@index([categoryId])
  @@index([colorId])
  @@index([promotionId])
}

// Configuration of Size

model ProductItem {
  id           String   @id @default(uuid())
  qty_in_stoke Decimal
  Product      Product  @relation(fields: [productId], references: [id])
  productId    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  Size         Size     @relation(fields: [sizeValue], references: [value])
  sizeValue    String

  @@index([sizeValue])
  @@index([productId])
}

model Color {
  id        String    @id @default(uuid())
  name      String    @unique
  value     String    @unique
  product   Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Size {
  id          String        @id @default(uuid())
  value       String        @unique
  productItem ProductItem[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model ShoppingCart {
  id        String             @id @default(uuid())
  User      User               @relation(fields: [userId], references: [id])
  userId    String
  cartItem  ShoppingCartItem[]
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  @@index([userId])
}

model ShoppingCartItem {
  id           String       @id @default(uuid())
  ShoppingCart ShoppingCart @relation(fields: [cartId], references: [id])
  cartId       String
  Product      Product      @relation(fields: [productId], references: [id])
  productId    String
  qty_in_cart  Decimal
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@index([productId])
  @@index([cartId])
}

model Wishlist {
  id           String         @id @default(uuid())
  User         User           @relation(fields: [userId], references: [id])
  userId       String
  wishlistItem WishlistItem[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@index([userId])
}

model WishlistItem {
  id         String   @id @default(uuid())
  Wishlist   Wishlist @relation(fields: [wistlistId], references: [id])
  wistlistId String
  Product    Product  @relation(fields: [productId], references: [id])
  productId  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([productId])
  @@index([wistlistId])
}
